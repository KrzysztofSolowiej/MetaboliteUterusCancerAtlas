dist_plot <- ggplot(plot_data, aes(x = fct_rev(as.factor(n_sample)), y = Value, fill = Metric)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.6) +
facet_wrap(~ tumor_type, scales = "fixed", ncol = 1) +
labs(title = "Performance Metrics of SVM models (SMOTE - Biocrates data)\nby Tumor Type and n_sample",
x = "Sample Size (n_sample)",
y = "Metric Value",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip() +
geom_vline(xintercept = seq_along(unique(plot_data$n_sample)) - 0.5, color = "grey50", linetype = "dashed")
dist_plot
ggsave("C:/Users/X/Desktop/IT/CBK/Oversampling/plots/BIO_SVM_SMOTE_metrics.png", plot = dist_plot, width = 8, height = 14, dpi = 600, bg = "white")
# Radar plot
# Data preprocessing
svm_gc_complete_results <- svm_gc_complete_results %>%
mutate(tumor_type = factor(tumor_type))
radar_combined_data <- svm_gc_complete_results %>%
group_by(tumor_type, n_sample) %>%
summarize(
Accuracy = mean(Accuracy, na.rm = TRUE),
Precision = mean(Precision, na.rm = TRUE),
F1_Score = mean(F1_Score, na.rm = TRUE),
Recall = mean(Recall, na.rm = TRUE),
Jaccard_Index = mean(Jaccard_Index, na.rm = TRUE)
) %>%
ungroup()
# Generate radar plots for each tumor type
plots <- radar_combined_data %>%
group_split(tumor_type) %>%
map2(unique(radar_combined_data$tumor_type), ~create_radar_plot(.x, .y))
# Arrange the plots side-by-side
final_plot <- wrap_plots(plots, ncol = 2)
final_plot
ggsave("C:/Users/X/Desktop/IT/CBK/Oversampling/plots/BIO_SVM_SMOTE_radar.png", plot = final_plot, width = 12, height = 6, dpi = 600, bg = "white")
# Undersampling -------------------------
# G4
g4_results_under_df <- data.frame(
Accuracy = numeric(),
Precision = numeric(),
Recall = numeric(),
Specificity = numeric(),
Detection_Rate = numeric(),
F1_Score = numeric(),
Balanced_Accuracy = numeric(),
Jaccard_Index = numeric(),
oos = numeric(),
oos_post = numeric(),
Iteration = integer(),
n_sample = integer(),
tumor_type = character()
)
for (n_sample in n_samples) {
for (i in 1:n_iter) {
G4_sample <- get_group_id(biocrates, n_sample, "G4")
G4_sample$Group <- droplevels(G4_sample$Group)
G4_rest <- bio_G4 %>%
filter(!(`Sample Name` %in% G4_sample$`Sample Name`))
G4_rest <- get_group_id(G4_rest, 35, "G4")
G4_rest$Group <- droplevels(G4_rest$Group)
Con_sample <- get_group_id(biocrates, n_sample, "Con")
Con_sample$Group <- droplevels(Con_sample$Group)
Con_rest <- bio_Con %>%
filter(!(`Sample Name` %in% Con_sample$`Sample Name`))
Con_rest <- get_group_id(Con_rest, 35, "Con")
Con_rest$Group <- droplevels(Con_rest$Group)
G4_val_rest <- bind_rows(G4_rest, Con_rest)
G4_val_rest <- G4_val_rest %>%
group_by(Group) %>%
mutate(row_id = row_number()) %>%
ungroup() %>%
filter(Group == "G4" | (Group == "Con" & row_id %in% sample(row_id[Group == "Con"], ))) %>%
select(-row_id)
#G4_oversample <- themis::smote(G4_sample[,-1], var = "Group", k = 5, over_ratio = 65/n_sample)
data_to_model <- bind_rows(Con_sample[,-1], G4_sample)
data_to_model$Group <- droplevels(data_to_model$Group)
data_to_model %>% count(Group)
x <- as.data.frame(data_to_model %>% select(!c(Group, `Sample Name`)))
y <- data_to_model[["Group"]]
y <- relevel(y, ref = "G4")
train_control <- trainControl(method="repeatedcv", number=5, repeats=3,
allowParallel = TRUE)
svm_model <- caret::train(
x = x, y = y,
method = "svmRadial",
trControl = train_control,
tuneLength = 5
)
oos_metric <- 1 - max(svm_model$results$Accuracy)
svm_predictions <- predict(svm_model, newdata = G4_val_rest[,-c(1, 2)])
true_labels <- G4_val_rest
true_labels$Group <- factor(true_labels$Group, levels = c("Con", "G4"))
true_labels %>% count(Group)
conf_matrix <- confusionMatrix(
factor(svm_predictions, levels = levels(true_labels$Group)),
true_labels$Group, positive = "G4"
)
print(conf_matrix)
accuracy <- conf_matrix$overall["Accuracy"]
precision <- conf_matrix$byClass["Pos Pred Value"]
recall <- conf_matrix$byClass["Sensitivity"]
specificity <- conf_matrix$byClass["Specificity"]
detection_rate <- conf_matrix$byClass["Detection Rate"]
f_score <- 2 * (precision * recall) / (precision + recall)
balanced_accuracy <- conf_matrix$byClass["Balanced Accuracy"]
jaccard_index <- conf_matrix$table[2,2] / (conf_matrix$table[2,2] + conf_matrix$table[1,2] + conf_matrix$table[2,1])
oos_post <- 1 - conf_matrix$overall["Accuracy"]
metrics_list <- list(
Accuracy = accuracy,
Precision = precision,
Recall = recall,
Specificity = specificity,
Detection_Rate = detection_rate,
F1_Score = f_score,
Balanced_Accuracy = balanced_accuracy,
Jaccard_Index = jaccard_index,
oos = oos_metric,
oos_post = oos_post,
Iteration = i,
n_sample = n_sample,
tumor_type = "G4"
)
g4_results_under_df <- bind_rows(g4_results_under_df, metrics_list)
print(paste("Completed iteration", i))
}
}
# MT
mt_results_under_df <- data.frame(
Accuracy = numeric(),
Precision = numeric(),
Recall = numeric(),
Specificity = numeric(),
Detection_Rate = numeric(),
F1_Score = numeric(),
Balanced_Accuracy = numeric(),
Jaccard_Index = numeric(),
oos = numeric(),
oos_post = numeric(),
Iteration = integer(),
n_sample = integer(),
tumor_type = character()
)
for (n_sample in n_samples) {
for (i in 1:n_iter) {
MT_sample <- get_group_id(biocrates, n_sample, "MT")
MT_sample$Group <- droplevels(MT_sample$Group)
MT_rest <- bio_MT %>%
filter(!(`Sample Name` %in% MT_sample$`Sample Name`))
MT_rest <- get_group_id(MT_rest, 35, "MT")
MT_rest$Group <- droplevels(MT_rest$Group)
Con_sample <- get_group_id(biocrates, n_sample, "Con")
Con_sample$Group <- droplevels(Con_sample$Group)
Con_rest <- bio_Con %>%
filter(!(`Sample Name` %in% Con_sample$`Sample Name`))
Con_rest <- get_group_id(Con_rest, 35, "Con")
Con_rest$Group <- droplevels(Con_rest$Group)
MT_val_rest <- bind_rows(MT_rest, Con_rest)
MT_val_rest <- MT_val_rest %>%
group_by(Group) %>%
mutate(row_id = row_number()) %>%
ungroup() %>%
filter(Group == "MT" | (Group == "Con" & row_id %in% sample(row_id[Group == "Con"], ))) %>%
select(-row_id)
#G4_oversample <- themis::smote(G4_sample[,-1], var = "Group", k = 5, over_ratio = 65/n_sample)
data_to_model <- bind_rows(Con_sample[,-1], MT_sample)
data_to_model$Group <- droplevels(data_to_model$Group)
data_to_model %>% count(Group)
x <- as.data.frame(data_to_model %>% select(!c(Group, `Sample Name`)))
y <- data_to_model[["Group"]]
y <- relevel(y, ref = "MT")
train_control <- trainControl(method="repeatedcv", number=5, repeats=3,
allowParallel = TRUE)
svm_model <- caret::train(
x = x, y = y,
method = "svmRadial",
trControl = train_control,
tuneLength = 5
)
oos_metric <- 1 - max(svm_model$results$Accuracy)
svm_predictions <- predict(svm_model, newdata = MT_val_rest[,-c(1, 2)])
true_labels <- MT_val_rest
true_labels$Group <- factor(true_labels$Group, levels = c("Con", "MT"))
true_labels %>% count(Group)
conf_matrix <- confusionMatrix(
factor(svm_predictions, levels = levels(true_labels$Group)),
true_labels$Group, positive = "MT"
)
print(conf_matrix)
accuracy <- conf_matrix$overall["Accuracy"]
precision <- conf_matrix$byClass["Pos Pred Value"]
recall <- conf_matrix$byClass["Sensitivity"]
specificity <- conf_matrix$byClass["Specificity"]
detection_rate <- conf_matrix$byClass["Detection Rate"]
f_score <- 2 * (precision * recall) / (precision + recall)
balanced_accuracy <- conf_matrix$byClass["Balanced Accuracy"]
jaccard_index <- conf_matrix$table[2,2] / (conf_matrix$table[2,2] + conf_matrix$table[1,2] + conf_matrix$table[2,1])
oos_post <- 1 - conf_matrix$overall["Accuracy"]
metrics_list <- list(
Accuracy = accuracy,
Precision = precision,
Recall = recall,
Specificity = specificity,
Detection_Rate = detection_rate,
F1_Score = f_score,
Balanced_Accuracy = balanced_accuracy,
Jaccard_Index = jaccard_index,
oos = oos_metric,
oos_post = oos_post,
Iteration = i,
n_sample = n_sample,
tumor_type = "MT"
)
mt_results_under_df <- bind_rows(mt_results_under_df, metrics_list)
print(paste("Completed iteration", i))
}
}
svm_gc_undersampling_under_results <- bind_rows(g4_results_under_df, mt_results_under_df)
write.csv(svm_gc_undersampling_under_results, "C:/Users/X/Desktop/IT/CBK/Oversampling/results/ML/BIO_SVM_under_results.csv", row.names = FALSE)
# Visualization - Under -----------------
under_plot_data <- svm_gc_undersampling_under_results %>%
mutate(tumor_type = ifelse(tumor_type == "G4", "Glioma", "Meningioma"))
names(under_plot_data)[9] <- "OOS"
names(under_plot_data)[10] <- "OOS post"
under_plot_data <- under_plot_data %>%
pivot_longer(cols = all_of(metrics_to_plot), names_to = "Metric", values_to = "Value")
dist_under_plot <- ggplot(under_plot_data, aes(x = fct_rev(as.factor(n_sample)), y = Value, fill = Metric)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.6) +
facet_wrap(~ tumor_type, scales = "fixed", ncol = 1) +
labs(title = "Performance Metrics of SVM models (undersampling - Biocrates data)\nby Tumor Type and n_sample",
x = "Sample Size (n_sample)",
y = "Metric Value",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip() +
geom_vline(xintercept = seq_along(unique(plot_data$n_sample)) - 0.5, color = "grey50", linetype = "dashed")
dist_under_plot
ggsave("C:/Users/X/Desktop/IT/CBK/Oversampling/plots/BIO_SVM_under_metrics.png", plot = dist_under_plot, width = 8, height = 14, dpi = 600, bg = "white")
# Radar plot
radar_under_data <- svm_gc_undersampling_under_results %>%
mutate(tumor_type = factor(tumor_type))
radar_under_data <- radar_under_data %>%
group_by(tumor_type, n_sample) %>%
summarize(
Accuracy = mean(Accuracy, na.rm = TRUE),
Precision = mean(Precision, na.rm = TRUE),
F1_Score = mean(F1_Score, na.rm = TRUE),
Recall = mean(Recall, na.rm = TRUE),
Jaccard_Index = mean(Jaccard_Index, na.rm = TRUE)
) %>%
ungroup()
plots <- radar_under_data %>%
group_split(tumor_type) %>%
map2(unique(radar_under_data$tumor_type), ~create_radar_plot(.x, .y))
final_plot <- wrap_plots(plots, ncol = 2)
final_plot
ggsave("C:/Users/X/Desktop/IT/CBK/Oversampling/plots/BIO_SVM_under_radar.png", plot = final_plot, width = 12, height = 6, dpi = 600, bg = "white")
# No oversampling --------------------
# G4
g4_results_onova_df <- data.frame(
Accuracy = numeric(),
Precision = numeric(),
Recall = numeric(),
Specificity = numeric(),
Detection_Rate = numeric(),
F1_Score = numeric(),
Balanced_Accuracy = numeric(),
Jaccard_Index = numeric(),
oos = numeric(),
oos_post = numeric(),
Iteration = integer(),
n_sample = integer(),
tumor_type = character()
)
for (n_sample in n_samples) {
for (i in 1:n_iter) {
G4_sample <- get_group_id(biocrates, n_sample, "G4")
G4_sample$Group <- droplevels(G4_sample$Group)
G4_rest <- bio_G4 %>%
filter(!(`Sample Name` %in% G4_sample$`Sample Name`))
G4_rest <- get_group_id(G4_rest, 35, "G4")
G4_rest$Group <- droplevels(G4_rest$Group)
Con_rest <- get_group_id(biocrates, 35, "Con")
Con_rest$Group <- droplevels(Con_rest$Group)
G4_val_rest <- bind_rows(G4_rest, Con_rest)
G4_val_rest <- G4_val_rest %>%
group_by(Group) %>%
mutate(row_id = row_number()) %>%
ungroup() %>%
filter(Group == "G4" | (Group == "Con" & row_id %in% sample(row_id[Group == "Con"], ))) %>%
select(-row_id)
#G4_oversample <- themis::smote(G4_sample[,-1], var = "Group", k = 5, over_ratio = 65/n_sample)
data_to_model <- bind_rows(bio_Con[,-1], G4_sample)
data_to_model$Group <- droplevels(data_to_model$Group)
data_to_model %>% count(Group)
x <- as.data.frame(data_to_model %>% select(!c(Group, `Sample Name`)))
y <- data_to_model[["Group"]]
y <- relevel(y, ref = "G4")
train_control <- trainControl(method="repeatedcv", number=5, repeats=3,
allowParallel = TRUE)
svm_model <- caret::train(
x = x, y = y,
method = "svmRadial",
trControl = train_control,
tuneLength = 5
)
oos_metric <- 1 - max(svm_model$results$Accuracy)
svm_predictions <- predict(svm_model, newdata = G4_val_rest[,-c(1, 2)])
true_labels <- G4_val_rest
true_labels$Group <- factor(true_labels$Group, levels = c("Con", "G4"))
true_labels %>% count(Group)
conf_matrix <- confusionMatrix(
factor(svm_predictions, levels = levels(true_labels$Group)),
true_labels$Group, positive = "G4"
)
print(conf_matrix)
accuracy <- conf_matrix$overall["Accuracy"]
precision <- conf_matrix$byClass["Pos Pred Value"]
recall <- conf_matrix$byClass["Sensitivity"]
specificity <- conf_matrix$byClass["Specificity"]
detection_rate <- conf_matrix$byClass["Detection Rate"]
f_score <- 2 * (precision * recall) / (precision + recall)
balanced_accuracy <- conf_matrix$byClass["Balanced Accuracy"]
jaccard_index <- conf_matrix$table[2,2] / (conf_matrix$table[2,2] + conf_matrix$table[1,2] + conf_matrix$table[2,1])
oos_post <- 1 - conf_matrix$overall["Accuracy"]
metrics_list <- list(
Accuracy = accuracy,
Precision = precision,
Recall = recall,
Specificity = specificity,
Detection_Rate = detection_rate,
F1_Score = f_score,
Balanced_Accuracy = balanced_accuracy,
Jaccard_Index = jaccard_index,
oos = oos_metric,
oos_post = oos_post,
Iteration = i,
n_sample = n_sample,
tumor_type = "G4"
)
g4_results_onova_df <- bind_rows(g4_results_onova_df, metrics_list)
print(paste("Completed iteration", i))
}
}
# MT
mt_results_onova_df <- data.frame(
Accuracy = numeric(),
Precision = numeric(),
Recall = numeric(),
Specificity = numeric(),
Detection_Rate = numeric(),
F1_Score = numeric(),
Balanced_Accuracy = numeric(),
Jaccard_Index = numeric(),
oos = numeric(),
oos_post = numeric(),
Iteration = integer(),
n_sample = integer(),
tumor_type = character()
)
for (n_sample in n_samples) {
for (i in 1:n_iter) {
MT_sample <- get_group_id(biocrates, n_sample, "MT")
MT_sample$Group <- droplevels(MT_sample$Group)
MT_rest <- bio_MT %>%
filter(!(`Sample Name` %in% MT_sample$`Sample Name`))
MT_rest <- get_group_id(MT_rest, 35, "MT")
MT_rest$Group <- droplevels(MT_rest$Group)
Con_rest <- get_group_id(biocrates, 35, "Con")
Con_rest$Group <- droplevels(Con_rest$Group)
MT_val_rest <- bind_rows(MT_rest, Con_rest)
MT_val_rest <- MT_val_rest %>%
group_by(Group) %>%
mutate(row_id = row_number()) %>%
ungroup() %>%
filter(Group == "MT" | (Group == "Con" & row_id %in% sample(row_id[Group == "Con"], ))) %>%
select(-row_id)
#MT_oversample <- themis::smote(MT_sample[,-1], var = "Group", k = 5, over_ratio = 68/n_sample)
data_to_model <- bind_rows(bio_Con[,-1], MT_sample)
data_to_model$Group <- droplevels(data_to_model$Group)
data_to_model %>% count(Group)
x <- as.data.frame(data_to_model %>% select(!c(Group, `Sample Name`)))
y <- data_to_model[["Group"]]
y <- relevel(y, ref = "MT")
train_control <- trainControl(method="repeatedcv", number=5, repeats=3,
allowParallel = TRUE)
svm_model <- caret::train(
x = x, y = y,
method = "svmRadial",
trControl = train_control,
tuneLength = 5
)
oos_metric <- 1 - max(svm_model$results$Accuracy)
svm_predictions <- predict(svm_model, newdata = MT_val_rest[,-c(1, 2)])
true_labels <- MT_val_rest
true_labels$Group <- factor(true_labels$Group, levels = c("Con", "MT"))
true_labels %>% count(Group)
conf_matrix <- confusionMatrix(
factor(svm_predictions, levels = levels(true_labels$Group)),
true_labels$Group, positive = "MT"
)
print(conf_matrix)
accuracy <- conf_matrix$overall["Accuracy"]
precision <- conf_matrix$byClass["Pos Pred Value"]
recall <- conf_matrix$byClass["Sensitivity"]
specificity <- conf_matrix$byClass["Specificity"]
detection_rate <- conf_matrix$byClass["Detection Rate"]
f_score <- 2 * (precision * recall) / (precision + recall)
balanced_accuracy <- conf_matrix$byClass["Balanced Accuracy"]
jaccard_index <- conf_matrix$table[2,2] / (conf_matrix$table[2,2] + conf_matrix$table[1,2] + conf_matrix$table[2,1])
oos_post <- 1 - conf_matrix$overall["Accuracy"]
metrics_list <- list(
Accuracy = accuracy,
Precision = precision,
Recall = recall,
Specificity = specificity,
Detection_Rate = detection_rate,
F1_Score = f_score,
Balanced_Accuracy = balanced_accuracy,
Jaccard_Index = jaccard_index,
oos = oos_metric,
oos_post = oos_post,
Iteration = i,
n_sample = n_sample,
tumor_type = "MT"
)
mt_results_onova_df <- bind_rows(mt_results_onova_df, metrics_list)
print(paste("Completed iteration", i))
}
}
svm_gc_noova_results <- bind_rows(g4_results_onova_df, mt_results_onova_df)
write.csv(svm_gc_noova_results, "C:/Users/X/Desktop/IT/CBK/Oversampling/results/ML/BIO_SVM_noova_results.csv", row.names = FALSE)
# Visualization - Noova -----------------
under_plot_data <- svm_gc_noova_results %>%
mutate(tumor_type = ifelse(tumor_type == "G4", "Glioma", "Meningioma"))
names(under_plot_data)[9] <- "OOS"
names(under_plot_data)[10] <- "OOS post"
under_plot_data <- under_plot_data %>%
pivot_longer(cols = all_of(metrics_to_plot), names_to = "Metric", values_to = "Value")
dist_under_plot <- ggplot(under_plot_data, aes(x = fct_rev(as.factor(n_sample)), y = Value, fill = Metric)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.6) +
facet_wrap(~ tumor_type, scales = "fixed", ncol = 1) +
labs(title = "Performance Metrics of SVM models (no oversampling - Biocrates data)\nby Tumor Type and n_sample",
x = "Sample Size (n_sample)",
y = "Metric Value",
fill = "Metric") +
theme_minimal() +
theme(legend.position = "bottom") +
coord_flip() +
geom_vline(xintercept = seq_along(unique(plot_data$n_sample)) - 0.5, color = "grey50", linetype = "dashed")
dist_under_plot
ggsave("C:/Users/X/Desktop/IT/CBK/Oversampling/plots/BIO_SVM_noova_metrics.png", plot = dist_under_plot, width = 8, height = 14, dpi = 600, bg = "white")
# Radar plot
radar_noova_data <- svm_gc_noova_results %>%
mutate(tumor_type = factor(tumor_type))
radar_noova_data <- radar_noova_data %>%
group_by(tumor_type, n_sample) %>%
summarize(
Accuracy = mean(Accuracy, na.rm = TRUE),
Precision = mean(Precision, na.rm = TRUE),
F1_Score = mean(F1_Score, na.rm = TRUE),
Recall = mean(Recall, na.rm = TRUE),
Jaccard_Index = mean(Jaccard_Index, na.rm = TRUE)
) %>%
ungroup()
plots <- radar_noova_data %>%
group_split(tumor_type) %>%
map2(unique(radar_noova_data$tumor_type), ~create_radar_plot(.x, .y))
final_plot <- wrap_plots(plots, ncol = 2)
final_plot
ggsave("C:/Users/X/Desktop/IT/CBK/Oversampling/plots/BIO_SVM_noova_radar.png", plot = final_plot, width = 12, height = 6, dpi = 600, bg = "white")
install.packages("R6")
library(R6)
install.packages("golem")
install.packages("usethis")
golem::create_golem("C:/Users/X/Desktop/IT/CBK/MetaboHelpeR")
golem::create_golem("C:/Users/X/Desktop/IT/CBK/metabolite_uterus_cancer_atlas")
golem::create_golem("C:/Users/X/Desktop/IT/CBK/MetaboliteUterusCancerAtlas")
golem::create_golem("C:/Users/X/Desktop/IT/CBK/MetaboliteUterusCancerAtlas")
library(tidyverse)
library(tidyr)
library(broom)
library(readxl)
library(janitor)
library(reshape2)
library(sjmisc)
# data ----------------
setwd("C:/Users/X/Desktop/IT/CBK/MetaboliteUterusCancerAtlas/inst/extdata")
path <- "example.xlsx"
data <- read_excel(path, sheet = 1)
saveRDS(df, file = "small_example.rds")
df_loaded <- readRDS("small_example.rds")
View(df_loaded)
View(data)
setwd("C:/Users/X/Desktop/IT/CBK/MetaboliteUterusCancerAtlas/inst/extdata")
path <- "example.xlsx"
data <- read_excel(path, sheet = 1)
saveRDS(data, file = "small_example.rds")
df_loaded <- readRDS("small_example.rds")
View(df_loaded)
setwd("C:/Users/X/Desktop/IT/CBK/MetaboliteUterusCancerAtlas/inst/extdata")
path <- "example.xlsx"
data <- read_excel(path, sheet = 1)
saveRDS(data, file = "small_example.rds")
df_loaded <- readRDS("small_example.rds")
View(df_loaded)
setwd("C:/Users/X/Desktop/IT/CBK/MetaboliteUterusCancerAtlas/inst/extdata")
path <- "example.xlsx"
data <- read_excel(path, sheet = 1)
saveRDS(data, file = "small_example.rds")
df_loaded <- readRDS("small_example.rds")
View(df_loaded)
